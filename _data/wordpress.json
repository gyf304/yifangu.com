[{"id":1066,"date":"2024-07-16T04:58:29","date_gmt":"2024-07-16T04:58:29","guid":{"rendered":"https:\/\/blog.yifangu.com\/?p=1066"},"modified":"2024-07-16T06:06:02","modified_gmt":"2024-07-16T06:06:02","slug":"crossing-the-mixed-content-boundary-abusing-stun-turn-as-a-communication-channel","status":"publish","type":"post","link":"https:\/\/blog.yifangu.com\/2024\/07\/16\/crossing-the-mixed-content-boundary-abusing-stun-turn-as-a-communication-channel\/","title":{"rendered":"Crossing the Mixed Content Boundary: abusing STUN\/TURN as a Communication Channel"},"content":{"rendered":"\n<p>TL;DR: You can send and receive data using TURN by encoding data into username and IPv6 UDP address.<\/p>\n\n\n\n<p>Say that you have a HTTPS website. Modern web safety forbids it from accessing insecure parts of the network using HTTP. This is usually not an issue, since signing a HTTPS certificate for a website is fairly easy thanks to Let&#8217;s Encrypt.<\/p>\n\n\n\n<p>However, there are situations where signing a certificate for a server is not feasible. For example, you cannot obtain a certificate for a server that is not on the public Internet.<sup data-fn=\"16f32272-6d06-459a-b3b1-fb9bbfbddb51\" class=\"fn\"><a href=\"#16f32272-6d06-459a-b3b1-fb9bbfbddb51\" id=\"16f32272-6d06-459a-b3b1-fb9bbfbddb51-link\">1<\/a><\/sup> If I have a server running at <code>192.168.1.100<\/code>, there are not a lot of options to communicate with it from <code>https:\/\/example.com<\/code>.<sup data-fn=\"f7972865-542c-48fd-ab16-dd9b2feb0bae\" class=\"fn\"><a href=\"#f7972865-542c-48fd-ab16-dd9b2feb0bae\" id=\"f7972865-542c-48fd-ab16-dd9b2feb0bae-link\">2<\/a><\/sup><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Examining Existing Options<\/h2>\n\n\n\n<p>With <code>https<\/code> to <code>http<\/code> communication not being available, the remaining options are<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Using redirects, by redirecting users from <code>https:\/\/example.com<\/code> to <code>http:\/\/192.168.1.100<\/code> and then back to <code>https:\/\/example.com<\/code>, we can encode information in the URL, and pass them back and forth.\n<ul class=\"wp-block-list\">\n<li>This is a lot like how SSO is implemented using SAML and OAuth2.<\/li>\n\n\n\n<li>This is not great for UX. Having to redirect a user back and forth each time we want to communicate is not good.<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>WebRTC\n<ul class=\"wp-block-list\">\n<li>WebRTC cannot by itself establish an connection. It needs a signaling server. This means that the local server would need to connect to the Internet. This may not be feasible or maybe you just don&#8217;t want to host a WebRTC signaling server.<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>Use WebRTC, but use redirects to handle signaling\n<ul class=\"wp-block-list\">\n<li>This is a lot better than option 1, as you don&#8217;t need to do redirects every time when communication is needed.<\/li>\n\n\n\n<li>However, this still requires a redirect each time the user visits the website since WebRTC sessions do not persist over navigations. So every time you go to <code>https:\/\/example.com<\/code>, the user needs to be redirected to and from <code>http:\/\/192.168.1.100<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\n\n\n<p>Can we do better than these options? Can we establish a non-TLS connection without redirects, user interaction, or a pre-existing communication channel? Given that we have WebRTC, it means that we just need to pass about a couple KBs of data bidirectionally to establish a connection &#8211; is there any way that allows a browser to pass small amount of data crossing the mixed content boundary?<\/p>\n\n\n\n<p>The answer is yes, via STUN\/TURN.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Smuggling Bytes using STUN\/TURN<\/h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><iframe loading=\"lazy\" src=\"https:\/\/giphy.com\/embed\/l44QjgeQ5ium91n9K\" width=\"480\" height=\"470\" style=\"pointer-events:none\" frameborder=\"0\" class=\"giphy-embed\" referrerpolicy=\"no-referrer\" scrolling=\"no\"><\/iframe><\/figure>\n\n\n\n<p>Both <a href=\"https:\/\/en.wikipedia.org\/wiki\/Session_Traversal_Utilities_for_NAT\">STUN<\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Traversal_Using_Relays_around_NAT\">TURN<\/a> are protocols of the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Interactive_Connectivity_Establishment\">Interactive Connectivity Establishment<\/a> (ICE) suite, intended to establish connectivity though <a href=\"https:\/\/en.wikipedia.org\/wiki\/Network_address_translation\">NAT<\/a>.<\/p>\n\n\n\n<p>The purpose of STUN is to get a public UDP address of a peer. If we use IPv4, That is 6 bytes of information, 4 bytes from the IP, and 2 bytes from the port (4 bytes usable if we eliminate invalid ports and IP addresses). If we use IPv6, we can get 18 bytes of information (16 bytes usable). The problem with STUN is that there&#8217;s no user configurable input to STUN. You can receive data, but not send data.<\/p>\n\n\n\n<p>The sister protocol TURN is an extension to STUN. TURN allows allocating a UDP relay, in case a connection cannot be established via STUN. Since TURN is a relay server, it is a lot more expensive to run than STUN, therefore some form of authentication is usually required. TURN sends the username in plaintext. Given that the safe MTU is about 512 bytes and there&#8217;s overhead in the TURN protocol, it&#8217;s possible to send at least 256 bytes of data using a TURN username. We can receive 16 bytes of data from a TURN response, encoded in a IPv6 address and port number pair.<\/p>\n\n\n\n<p><strong>We are now able to send about 256 bytes of data (encoded in username) and receive 16 bytes of data (encoded in IPv6 address and port) by abusing TURN.<\/strong><\/p>\n\n\n\n<p>16 bytes in a response is obviously not sufficient, as a regular WebRTC SDP weighs about 1.5KB. So I developed a janky protocol that splits the request and response into smaller chunks.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>The client first allocates a request and tells the server how big is request is going to be, encoded in the username. The server returns a 16 byte request ID.<\/li>\n\n\n\n<li>The client incrementally sends the parts of the request in 256 byte chunks using the allocated request ID.<\/li>\n\n\n\n<li>Once all parts are sent, the client tells the server to execute the request. The server returns the response size.<\/li>\n\n\n\n<li>The client incrementally pulls the response from the server in 16 byte chunks.<\/li>\n<\/ul>\n\n\n\n<p>Given that a WebRTC SDP is about 1.5KB. This is going to result in about 100 TURN request and response pairs, which translates into 400 UDP packets. We transmitted 3KB using 400 UDP packets, averaging an impressive 7.5 bytes transmitted per UDP packet.<\/p>\n\n\n\n<p>This is not great. So I trimmed the response SDP down by removing unnecessary information (in particular, redundant candidates). This brought down the SDP size to about 700 bytes.<sup data-fn=\"4cdb01fa-a5d3-401f-9107-434f3e3454f3\" class=\"fn\"><a href=\"#4cdb01fa-a5d3-401f-9107-434f3e3454f3\" id=\"4cdb01fa-a5d3-401f-9107-434f3e3454f3-link\">3<\/a><\/sup><\/p>\n\n\n\n<p>This is still not great, so I added ZLIB compression using a pre-defined dictionary. I compressed the SDPs down to about 300 bytes each &#8211; now we only need to send about 80 UDP packets.<\/p>\n\n\n\n<p>Now we can establish a communication channel by only using IP address + port.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Putting it All Together<\/h2>\n\n\n\n<p>I made a demo at <a href=\"https:\/\/codepen.io\/gyf304\/pen\/oNrjoJj\">https:\/\/codepen.io\/gyf304\/pen\/oNrjoJj<\/a>. The demo fetches a proxied version of <code>https:\/\/example.com<\/code> over TURN. It requires 0 user interaction (apart from clicking the &#8220;Execute&#8221; button) to communicate with a non-secure server from a secure origin.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"720\" height=\"562\" src=\"https:\/\/blog.yifangu.com\/wp-content\/uploads\/2024\/07\/demo.gif\" alt=\"\" class=\"wp-image-1077\"\/><\/figure>\n\n\n\n<p>I also published NPM packages <code>@turnx\/server<\/code> and <code>@turnx\/client<\/code>, in case people want to give it a spin. The <code>@turnx\/server<\/code> package provides a server that allows you to proxy a HTTP\/HTTPS website over TURN, and the <code>@turnx\/client<\/code> package provides a client that implements a similar interface to <code>fetch<\/code>. The packages are not documented, but the demo above should be sufficient to get you going.<\/p>\n\n\n\n<p>The source is available at <a href=\"https:\/\/github.com\/gyf304\/turnx\">https:\/\/github.com\/gyf304\/turnx<\/a>.<\/p>\n\n\n\n<p>It is also worth noting that this communication protocol is extremely inefficient, so the intended usage is to use this to establish an actual connection using WebRTC (e.g. by using <a href=\"https:\/\/datatracker.ietf.org\/doc\/draft-ietf-wish-whip\/\">WHIP<\/a>).<\/p>\n\n\n\n<p>Also: don&#8217;t do this over the public Internet.<\/p>\n\n\n<ol class=\"wp-block-footnotes\"><li id=\"16f32272-6d06-459a-b3b1-fb9bbfbddb51\">You can technically sign a cert for a local address using techniques outlined in <a href=\"https:\/\/letsencrypt.org\/docs\/certificates-for-localhost\/\">https:\/\/letsencrypt.org\/docs\/certificates-for-localhost\/<\/a>. But as the article also pointed out, distributing a private cert as part of a software package is a big no-no. <a href=\"#16f32272-6d06-459a-b3b1-fb9bbfbddb51-link\" aria-label=\"Jump to footnote reference 1\">\u21a9\ufe0e<\/a><\/li><li id=\"f7972865-542c-48fd-ab16-dd9b2feb0bae\">Why would someone want to communicate to a LAN server from a secure HTTPS website? I can think of a few use-cases: a media app like Plex where logic is served from a HTTPS remote server, or a PWA, and the content is stored on a local server; a HTTPS website for upgrading the firmware of a LAN only appliance; or a web app to transfer files in a LAN and you don&#8217;t want to build a WebRTC signaling server. <a href=\"#f7972865-542c-48fd-ab16-dd9b2feb0bae-link\" aria-label=\"Jump to footnote reference 2\">\u21a9\ufe0e<\/a><\/li><li id=\"4cdb01fa-a5d3-401f-9107-434f3e3454f3\">You can reduce this further. In fact, people have encoded an SDP in 106 bytes! (<a href=\"https:\/\/webrtchacks.com\/the-minimum-viable-sdp\/\">https:\/\/webrtchacks.com\/the-minimum-viable-sdp\/<\/a>) <a href=\"#4cdb01fa-a5d3-401f-9107-434f3e3454f3-link\" aria-label=\"Jump to footnote reference 3\">\u21a9\ufe0e<\/a><\/li><\/ol>\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>TL;DR: You can send and receive data using TURN by encoding data into username and IPv6 UDP address. Say that you have a HTTPS website. Modern web safety forbids it from accessing insecure parts of the network using HTTP. This is usually not an issue, since signing a HTTPS certificate for a website is fairly&hellip; <a class=\"more-link\" href=\"https:\/\/blog.yifangu.com\/2024\/07\/16\/crossing-the-mixed-content-boundary-abusing-stun-turn-as-a-communication-channel\/\">Continue reading <span class=\"screen-reader-text\">Crossing the Mixed Content Boundary: abusing STUN\/TURN as a Communication Channel<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":"[{\"content\":\"You can technically sign a cert for a local address using techniques outlined in <a href=\\\"https:\/\/letsencrypt.org\/docs\/certificates-for-localhost\/\\\">https:\/\/letsencrypt.org\/docs\/certificates-for-localhost\/<\/a>. But as the article also pointed out, distributing a private cert as part of a software package is a big no-no.\",\"id\":\"16f32272-6d06-459a-b3b1-fb9bbfbddb51\"},{\"content\":\"Why would someone want to communicate to a LAN server from a secure HTTPS website? I can think of a few use-cases: a media app like Plex where logic is served from a HTTPS remote server, or a PWA, and the content is stored on a local server; a HTTPS website for upgrading the firmware of a LAN only appliance; or a web app to transfer files in a LAN and you don't want to build a WebRTC signaling server.\",\"id\":\"f7972865-542c-48fd-ab16-dd9b2feb0bae\"},{\"content\":\"You can reduce this further. In fact, people have encoded an SDP in 106 bytes! (<a href=\\\"https:\/\/webrtchacks.com\/the-minimum-viable-sdp\/\\\">https:\/\/webrtchacks.com\/the-minimum-viable-sdp\/<\/a>)\",\"id\":\"4cdb01fa-a5d3-401f-9107-434f3e3454f3\"}]"},"categories":[1],"tags":[6,32,30,31,29],"class_list":["post-1066","post","type-post","status-publish","format-standard","hentry","category-uncategorized","tag-coding","tag-mixed-content","tag-stun","tag-turn","tag-webrtc","entry"],"_links":{"self":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/1066","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/comments?post=1066"}],"version-history":[{"count":39,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/1066\/revisions"}],"predecessor-version":[{"id":1111,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/1066\/revisions\/1111"}],"wp:attachment":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media?parent=1066"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/categories?post=1066"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/tags?post=1066"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1017,"date":"2023-07-06T05:03:47","date_gmt":"2023-07-06T09:03:47","guid":{"rendered":"https:\/\/blog.yifangu.com\/?p=1017"},"modified":"2023-07-06T05:03:47","modified_gmt":"2023-07-06T09:03:47","slug":"ipv4-network-address-translation-nat-for-steam-nat4s","status":"publish","type":"post","link":"https:\/\/blog.yifangu.com\/2023\/07\/06\/ipv4-network-address-translation-nat-for-steam-nat4s\/","title":{"rendered":"IPv4 Network Address Translation for Steam (NAT4S)"},"content":{"rendered":"\n<p>TL;DR \u2013 I made Steam multiplayer possible with classic LAN games through a project called <a href=\"https:\/\/github.com\/gyf304\/partylan\" target=\"_blank\" rel=\"noreferrer noopener\">PartyLAN<\/a>. It enables network address translation (NAT) between IPv4 and Steam IDs.<\/p>\n\n\n\n<p>Network address translation (NAT) is not an obscure concept &#8211; it has been in use since 1994. The basic idea is simple: a router, either software or hardware, takes packets from an incoming IP address (e.g., <code>192.168.1.123<\/code>), converts it to another address (e.g., <code>1.2.3.4<\/code>), and sends it out. The router also performs the reverse process, converting packets from the outside address (IP <code>1.2.3.4<\/code>) to the inside address (e.g., <code>192.168.1.123<\/code>).<\/p>\n\n\n\n<p>This concept is widely used, and there are several variants of NAT based on the address space it maps from and to:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>NAT44 &#8211; the most common form of NAT, which converts between two IPv4 addresses, typically between a class A, B, or C private address space and the public IP address space (e.g., between <code>192.168.1.123<\/code> and <code>1.2.3.4<\/code>). This is what home routers use.<\/li>\n<\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/c7\/NAT_Concept-en.svg\" alt=\"\" \/><figcaption class=\"wp-element-caption\">Illustration of NAT44 (made by <a href=\"https:\/\/commons.wikimedia.org\/wiki\/File:NAT_Concept-en.svg\">Michel Bakni<\/a>)<\/figcaption><\/figure>\n\n\n\n<ul class=\"wp-block-list\">\n<li>NAT444 &#8211; a variant of NAT44 that adds an intermediate <a rel=\"noreferrer noopener\" href=\"https:\/\/en.wikipedia.org\/wiki\/Carrier-grade_NAT\" target=\"_blank\">CGNAT<\/a> address space. (e.g. <code>192.168.1.123<\/code>, then <code>100.89.199.129<\/code>, finally to <code>1.2.3.4<\/code>).<\/li>\n\n\n\n<li>NAT64 &#8211; converts an IPv6 address to an IPv4 address and is commonly used to provide IPv4 connectivity to IPv6-only devices<\/li>\n<\/ul>\n\n\n\n<p>By applying the concept of NAT to Steam, which can be seen as a network with Steam user IDs as network addresses, it becomes technically feasible to perform network address translation between IPv4 and Steam IDs. I refer to this as NAT4S.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">How is this useful?<\/h4>\n\n\n\n<p>For PC gamers, the standard method of playing multiplayer games is Steam Multiplayer. However, older games use the vanilla IP stack designed for LAN party-style multiplayer. Playing these games over the internet is challenging for non-technical individuals and often involves configuring the firewall on the home router. By implementing a network address translator that converts between IPv4 and Steam Networking, classic games can seamlessly communicate over Steam Networking.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Implementation<\/h3>\n\n\n\n<p>I opted to use the CGNAT address space (<code>100.64.0.0\/10<\/code>) for the mapping. Unlike traditional class A\/B\/C private addresses, this address space is rarely used by end-user devices.<\/p>\n\n\n\n<p>However, a problem arises immediately: the CGNAT address space only contains about 4 million addresses, which may seem like a lot but is significantly smaller than the number of Steam accounts, exceeding 1 billion. So, how do we accommodate 1 billion accounts with just 4 million addresses? The answer is simple: we don&#8217;t. On average, a Steam user has fewer than 100 friends, and Valve limits the number to 250. By taking the Steam ID modulo 4 million, the chances of collision are incredibly small (around 0.1%) for the average user. In the unlikely event of a collision, we increment the address by 1 until a free address is found. This IP allocation method ensures relatively stable IPs that are likely to be the same on different computers. It is also stateless, eliminating the need for a DHCP-like protocol.<\/p>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>TL;DR \u2013 I made Steam multiplayer possible with classic LAN games through a project called PartyLAN. It enables network address translation (NAT) between IPv4 and Steam IDs. Network address translation (NAT) is not an obscure concept &#8211; it has been in use since 1994. The basic idea is simple: a router, either software or hardware,&hellip; <a class=\"more-link\" href=\"https:\/\/blog.yifangu.com\/2023\/07\/06\/ipv4-network-address-translation-nat-for-steam-nat4s\/\">Continue reading <span class=\"screen-reader-text\">IPv4 Network Address Translation for Steam (NAT4S)<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[1],"tags":[6],"class_list":["post-1017","post","type-post","status-publish","format-standard","hentry","category-uncategorized","tag-coding","entry"],"_links":{"self":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/1017","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/comments?post=1017"}],"version-history":[{"count":0,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/1017\/revisions"}],"wp:attachment":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media?parent=1017"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/categories?post=1017"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/tags?post=1017"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":998,"date":"2023-01-06T02:08:47","date_gmt":"2023-01-06T07:08:47","guid":{"rendered":"https:\/\/blog.yifangu.com\/?p=998"},"modified":"2023-01-06T02:08:47","modified_gmt":"2023-01-06T07:08:47","slug":"janky-ntp-setting-system-time-using-http","status":"publish","type":"post","link":"https:\/\/blog.yifangu.com\/2023\/01\/06\/janky-ntp-setting-system-time-using-http\/","title":{"rendered":"Janky NTP &#8211; Setting System Time Using HTTP"},"content":{"rendered":"\n<p>I often find myself fighting with using NTP on linux machines &#8211; usually something goes wrong: maybe <code>ntpdate<\/code> isn&#8217;t there, or for some reason UDP is blocked, or maybe for some reason it just doesn&#8217;t want to do it. Here&#8217;s my janky version of <code>ntpdate<\/code> that overcomes those issues:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>date -s \"$(curl -si 1.1.1.1 | grep Date: | cut -d ' ' -f 2-)\" &amp;&amp; hwclock --systohc<\/code><\/pre>\n\n\n\n<p>Here&#8217;s ChatGPT explaining this bash one-liner to you:<\/p>\n\n\n\n<p>This command is setting the system date and time based on the date and time provided by the 1.1.1.1 server and then synchronizing the system hardware clock with the new system date and time.<\/p>\n\n\n\n<p>Here is a breakdown of the command:<\/p>\n\n\n\n<p><code>date -s \"$(curl -si 1.1.1.1 | grep Date: | cut -d ' ' -f 2-)\"<\/code>: This sets the system date and time. The curl command is used to send an HTTP request to the 1.1.1.1 server and retrieve the server&#8217;s response. The <code>-si<\/code> option tells curl to include the HTTP headers in the output and to be silent (i.e., not to show a progress meter or error messages). The output of curl is then piped to grep Date:, which searches for the string &#8220;Date:&#8221; in the output and prints the matching lines. The output of grep is then passed to cut, which extracts the second field (i.e., the date and time) from the input and prints it. The date and time is then passed as an argument to the -s option of date, which sets the system date and time to the specified value.<\/p>\n\n\n\n<p><code>hwclock --systohc<\/code>: This synchronizes the system hardware clock with the system date and time. The <code>--systohc<\/code> option tells hwclock to copy the system time to the hardware clock. The hardware clock is a battery-powered clock that keeps track of the time even when the system is turned off. This ensures that the system clock is set to the correct time when the system is next booted.<\/p>\n\n\n\n<p>Of course, if NTP works for you, don&#8217;t use this.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I often find myself fighting with using NTP on linux machines &#8211; usually something goes wrong: maybe ntpdate isn&#8217;t there, or for some reason UDP is blocked, or maybe for some reason it just doesn&#8217;t want to do it. Here&#8217;s my janky version of ntpdate that overcomes those issues: Here&#8217;s ChatGPT explaining this bash one-liner&hellip; <a class=\"more-link\" href=\"https:\/\/blog.yifangu.com\/2023\/01\/06\/janky-ntp-setting-system-time-using-http\/\">Continue reading <span class=\"screen-reader-text\">Janky NTP &#8211; Setting System Time Using HTTP<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[1],"tags":[3,15,19],"class_list":["post-998","post","type-post","status-publish","format-standard","hentry","category-uncategorized","tag-bash","tag-linux","tag-ntp","entry"],"_links":{"self":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/998","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/comments?post=998"}],"version-history":[{"count":0,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/998\/revisions"}],"wp:attachment":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media?parent=998"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/categories?post=998"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/tags?post=998"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":950,"date":"2022-12-17T02:07:45","date_gmt":"2022-12-17T07:07:45","guid":{"rendered":"https:\/\/blog.yifangu.com\/?p=950"},"modified":"2022-12-17T02:07:45","modified_gmt":"2022-12-17T07:07:45","slug":"file-system-as-partition-table","status":"publish","type":"post","link":"https:\/\/blog.yifangu.com\/2022\/12\/17\/file-system-as-partition-table\/","title":{"rendered":"File System as Partition Table"},"content":{"rendered":"\n<p>If you squint really hard &#8211; a partition table is basically a filesystem with only a handful of files &#8211; a partition table of, say, 4 partitions, is conceptually pretty much the same as a filesystem with only 4 files in it &#8211; the filesystem labels are the filenames, and the partitions are just the files.<\/p>\n\n\n\n<p>So why don&#8217;t we use a filesystem as a partition table and boot a OS from it? The pros of doing that is quite obvious: All partitioning operations previously done using <code>fdisk<\/code> or <code>parted<\/code> can now be done with file managers, or common UNIX utilities like <code>cp<\/code> and <code>truncate<\/code>. To add a new partition, add a new file; to remove a partition, delete the file; to make a partition larger, simply extend the file &#8211; no more moving other partition around like playing Klotski.<\/p>\n\n\n\n<p>This is especially true for beginners &#8211; one big hurdle to jump using a Raspberry Pi &#8211; is to prepare a SD card. Without prior knowledge of MBR or GPT, this process is quite error prone. If we&#8217;re using a filesystem as a partition table, the provisioning process is just copying some files into a FAT32 disk, which comes standard on most SD cards. Upgrading the OS is no different from copying files &#8211; which can be easily done in any OS.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Proof-of-Concept<\/h2>\n\n\n\n<p>Let&#8217;s get a proof of concept running &#8211; we want to prepare a SD card with a single partition, have a image file <code>root.img<\/code> in there, and boot off of it. In linux terms &#8211; mount the <code>root.img<\/code> as a loop device, and use that as root.<\/p>\n\n\n\n<p>Linux itself, does not have the capability of directly booting from a image file as root. We have to do it in a more roundabout way.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Boot to a <a href=\"https:\/\/www.linuxfromscratch.org\/blfs\/view\/svn\/postlfs\/initramfs.html\" target=\"_blank\" rel=\"noreferrer noopener\">initramfs<\/a><\/li>\n\n\n\n<li>Mount <code>devtmpfs<\/code>, <code>proc<\/code>, and <code>sys<\/code>.<\/li>\n\n\n\n<li>Mount the filesystem containing the image file, in the case of Raspberry Pis, this is <code>\/dev\/mmcblk0p1<\/code>.<\/li>\n\n\n\n<li>Mount the image file using a loop device.<\/li>\n\n\n\n<li><code>switch_root<\/code> to the actual rootfs.<\/li>\n<\/ol>\n\n\n\n<p>For the initramfs, we use BusyBox with a custom <a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/gyf304\/rootloader\/blob\/main\/init\" target=\"_blank\">init<\/a> file, with a few <a href=\"https:\/\/github.com\/gyf304\/rootloader\/tree\/main\/bin\" target=\"_blank\" rel=\"noreferrer noopener\">extra utilities<\/a> written in shell script.<\/p>\n\n\n\n<p>The boot process is roughly the following:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Linux starts <code>\/init<\/code> in the initramfs.<\/li>\n\n\n\n<li>Wait 5 seconds, if the user interrupts, offer options to use a rescue shell, reboot or shutdown.<\/li>\n\n\n\n<li>Mount <code>\/dev\/mmcblk0p1<\/code> to <code>\/boot<\/code> and give control to <code>\/boot\/init<\/code>. We do this because initramfs is not persistent, and we want to boot process to be configurable.<\/li>\n\n\n\n<li>Wait 5 seconds, if the user interrupts, let the user select a image to boot.<\/li>\n\n\n\n<li>Mount the image (default <code>\/boot\/root.img<\/code>) and <code>switch_root<\/code><\/li>\n\n\n\n<li>Raspbian takes over.<\/li>\n<\/ol>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>If you squint really hard &#8211; a partition table is basically a filesystem with only a handful of files &#8211; a partition table of, say, 4 partitions, is conceptually pretty much the same as a filesystem with only 4 files in it &#8211; the filesystem labels are the filenames, and the partitions are just the&hellip; <a class=\"more-link\" href=\"https:\/\/blog.yifangu.com\/2022\/12\/17\/file-system-as-partition-table\/\">Continue reading <span class=\"screen-reader-text\">File System as Partition Table<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[1],"tags":[],"class_list":["post-950","post","type-post","status-publish","format-standard","hentry","category-uncategorized","entry"],"_links":{"self":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/950","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/comments?post=950"}],"version-history":[{"count":0,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/950\/revisions"}],"wp:attachment":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media?parent=950"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/categories?post=950"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/tags?post=950"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":808,"date":"2022-01-23T19:04:32","date_gmt":"2022-01-24T00:04:32","guid":{"rendered":"https:\/\/blog.yifangu.com\/?p=808"},"modified":"2022-01-23T19:04:32","modified_gmt":"2022-01-24T00:04:32","slug":"crt-miniature-arcade-cabinet","status":"publish","type":"post","link":"https:\/\/blog.yifangu.com\/2022\/01\/23\/crt-miniature-arcade-cabinet\/","title":{"rendered":"CRT Miniature Arcade Cabinet"},"content":{"rendered":"\n<p>Hey I did a thing &#8211; a raspberry pi powered miniature arcade cabinet &#8211; with an actual real 4-inch monochrome CRT.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"http:\/\/blog.yifangu.com\/wp-content\/uploads\/2022\/01\/img-2479.jpg?w=768\" alt=\"\" class=\"wp-image-812\" \/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"http:\/\/blog.yifangu.com\/wp-content\/uploads\/2022\/01\/img-2480.jpg?w=768\" alt=\"\" class=\"wp-image-813\" \/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p>Next step &#8211; port WASM4 to RPi0 (or wait for someone to do that).<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Hey I did a thing &#8211; a raspberry pi powered miniature arcade cabinet &#8211; with an actual real 4-inch monochrome CRT. Next step &#8211; port WASM4 to RPi0 (or wait for someone to do that).<\/p>\n","protected":false},"author":1,"featured_media":812,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[1],"tags":[],"class_list":["post-808","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-uncategorized","entry"],"_links":{"self":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/808","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/comments?post=808"}],"version-history":[{"count":0,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/posts\/808\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media\/812"}],"wp:attachment":[{"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/media?parent=808"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/categories?post=808"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.yifangu.com\/wp-json\/wp\/v2\/tags?post=808"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]